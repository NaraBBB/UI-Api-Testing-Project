{
  "stats": {
    "suites": 6,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-05T02:52:52.232Z",
    "end": "2025-01-05T02:52:54.099Z",
    "duration": 1867,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c70d359f-56ca-41a6-ab72-71c8ac200b8f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9afdf51d-12b1-4937-90c3-d1b4ff15ee37",
          "title": "DELETE API Request Tests",
          "fullFile": "/Users/narmandakhbayaraa/Desktop/Back-End-Testing/API-TESTING/test-api/delete_request.js",
          "file": "/test-api/delete_request.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "SHOUDL BE ABLE TO DELETE A USER",
              "fullTitle": "DELETE API Request Tests SHOUDL BE ABLE TO DELETE A USER",
              "timedOut": false,
              "duration": 285,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteResponse = await axios.delete(\"https://reqres.in/api/users/2\")// end bid user 2-g delete hiij bna\nconsole.log(deleteResponse.data);\nexpect(deleteResponse.status).equal(204)",
              "err": {},
              "uuid": "7511f6d1-cdd2-4367-a1c3-54279efe2588",
              "parentUUID": "9afdf51d-12b1-4937-90c3-d1b4ff15ee37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7511f6d1-cdd2-4367-a1c3-54279efe2588"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 285,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7fae07c5-2257-41be-93d6-1e0a5b77604a",
          "title": "GET API Request Tests",
          "fullFile": "/Users/narmandakhbayaraa/Desktop/Back-End-Testing/API-TESTING/test-api/get_request.js",
          "file": "/test-api/get_request.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should fetch the user list for page 2 with correct metadata",
              "fullTitle": "GET API Request Tests Should fetch the user list for page 2 with correct metadata",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Perform the GET request\nconst response = await axios.get('https://reqres.in/api/users?page=2');\nconst { data, page, per_page, total, total_pages } = response.data;\n// Log the response for debugging purposes\nconsole.log(response.data);\n// Assertions\nexpect(response.status).to.equal(200); // Validate HTTP status code\nexpect(page).to.equal(2); // Validate page number\nexpect(per_page).to.equal(6); // Validate the number of users per page\nexpect(data).to.be.an(\"array\").that.is.not.empty; // Ensure the user list is an array and not empty\nexpect(total).to.be.a(\"number\").that.is.greaterThan(0); // Ensure total users exist\nexpect(total_pages).to.be.a(\"number\").that.is.greaterThan(0); // Validate total pages",
              "err": {},
              "uuid": "c8ec8d94-5e84-438a-8a5b-1e5825447c1e",
              "parentUUID": "7fae07c5-2257-41be-93d6-1e0a5b77604a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8ec8d94-5e84-438a-8a5b-1e5825447c1e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 92,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "444c3b10-346f-4e2a-bd83-10bffeb66c98",
          "title": "PATCH API Request Tests",
          "fullFile": "/Users/narmandakhbayaraa/Desktop/Back-End-Testing/API-TESTING/test-api/patch_request.js",
          "file": "/test-api/patch_request.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to a UPDATE ONLY NAME",
              "fullTitle": "PATCH API Request Tests Should be able to a UPDATE ONLY NAME",
              "timedOut": false,
              "duration": 253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Perform the PUT request\nconst patchResponse = await axios.patch(\"https://reqres.in/api/users/2\", {\n  name: randomFname,\n});\nconsole.log(patchResponse.data);\nexpect(patchResponse.status).to.equal(200);\nexpect(patchResponse.data).to.have.property(\"name\").that.equal(randomFname);",
              "err": {},
              "uuid": "ee197fd6-b6bb-4d87-967f-56206722951d",
              "parentUUID": "444c3b10-346f-4e2a-bd83-10bffeb66c98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "End zuvhun ajiliig UPDATE hiij vzii",
              "fullTitle": "PATCH API Request Tests End zuvhun ajiliig UPDATE hiij vzii",
              "timedOut": false,
              "duration": 256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const patchResponse = await axios.patch(\"https://reqres.in/api/users/2\", {\n  job: \"zion resident\",\n});\nconsole.log(patchResponse.data);\nexpect(patchResponse.status).to.equal(200);\nexpect(patchResponse.data).to.have.property(\"job\").that.equals(\"zion resident\")",
              "err": {},
              "uuid": "41e8054d-6a0f-476b-bb80-c2109cdbe422",
              "parentUUID": "444c3b10-346f-4e2a-bd83-10bffeb66c98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee197fd6-b6bb-4d87-967f-56206722951d",
            "41e8054d-6a0f-476b-bb80-c2109cdbe422"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 509,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "92067a5b-f8e6-4173-9b37-9bb2e2b31c13",
          "title": "POST API Request Tests",
          "fullFile": "/Users/narmandakhbayaraa/Desktop/Back-End-Testing/API-TESTING/test-api/post_request.js",
          "file": "/test-api/post_request.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should successfully create a user WITH FAKER with name and job",
              "fullTitle": "POST API Request Tests Should successfully create a user WITH FAKER with name and job",
              "timedOut": false,
              "duration": 234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const randomFname = faker.person.firstName(); \nconst randomJobTitle = faker.person.jobTitle()\n // Perform the POST request\n const response = await axios.post('https://reqres.in/api/users', {\n     name: randomFname,\n     job: randomJobTitle \n });\n // Log the response for debugging\n console.log(response.data);\n // Assertions\n expect(response.status).to.equal(201); // Ensure status code is 201 (Created)\n expect(response.data).to.have.property(\"name\").that.equals(randomFname); // Validate name\n expect(response.data).to.have.property(\"job\").that.equals(randomJobTitle); // Validate job\n expect(response.data).to.have.property(\"id\"); // Ensure an ID is returned\n expect(response.data).to.have.property(\"createdAt\"); // Ensure a timestamp is returned",
              "err": {},
              "uuid": "d5b754a8-ae83-4b88-9a93-b232438c7b40",
              "parentUUID": "92067a5b-f8e6-4173-9b37-9bb2e2b31c13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should successfully create a user WITH GIVEN name and job ",
              "fullTitle": "POST API Request Tests Should successfully create a user WITH GIVEN name and job ",
              "timedOut": false,
              "duration": 241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Perform the POST request\n   const response = await axios.post('https://reqres.in/api/users', \n       {\n           \"name\": \"morpheus\",\n           \"job\": \"zion resident\"\n       }\n   );\n   // Log the response for debugging\n   console.log(response.data)\n   expect(response.data).to.have.property(\"name\").equals(\"morpheus\");\n   expect(response.data.job).equal(\"zion resident\")",
              "err": {},
              "uuid": "8f93d2d4-19b2-4506-928f-c230e99a9bcf",
              "parentUUID": "92067a5b-f8e6-4173-9b37-9bb2e2b31c13",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d5b754a8-ae83-4b88-9a93-b232438c7b40",
            "8f93d2d4-19b2-4506-928f-c230e99a9bcf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 475,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3293a64f-3eb6-48f1-a8f6-3f0b7f5c872c",
          "title": "PUT API Request Tests",
          "fullFile": "/Users/narmandakhbayaraa/Desktop/Back-End-Testing/API-TESTING/test-api/put_request.js",
          "file": "/test-api/put_request.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to a update a user details",
              "fullTitle": "PUT API Request Tests Should be able to a update a user details",
              "timedOut": false,
              "duration": 245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Perform the PUT request\nconst putResponse = await axios.put(\"https://reqres.in/api/users/2\", {\n  name: randomFname,\n  job: randomJobTitle,\n});\nconsole.log(putResponse.data);\nexpect(putResponse.status).to.equal(200);\nexpect(putResponse.data).to.have.property(\"name\").that.equal(randomFname);\nexpect(putResponse.data).to.have.property(\"job\").that.equal(randomJobTitle)",
              "err": {},
              "uuid": "c40e9997-768b-474d-9845-2e6e9786954d",
              "parentUUID": "3293a64f-3eb6-48f1-a8f6-3f0b7f5c872c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c40e9997-768b-474d-9845-2e6e9786954d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 245,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f59d3bdf-f15a-416c-83aa-7757cae1cd72",
          "title": "Write Data To JSON File Tests",
          "fullFile": "/Users/narmandakhbayaraa/Desktop/Back-End-Testing/API-TESTING/test-api/write_data_to_json.js",
          "file": "/test-api/write_data_to_json.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to write data to JSON file",
              "fullTitle": "Write Data To JSON File Tests should be able to write data to JSON file",
              "timedOut": false,
              "duration": 251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  //! Step 1: Generate random test data\n  const randomName = faker.person.firstName(); \n  const randomJobTitle = faker.person.jobTitle()\n\n //! Step 2: Make POST API request \n const { data: responseData } = await axios.post(`${process.env.API_URL}/users`, {\n    name: randomName,\n    job: randomJobTitle,\n  }); \n  \n  //! Step 3: Log response data for debugging\n  console.log(responseData);\n   //! Step 4: Assert API response\n   expect(responseData.name).to.equal(randomName);\n   expect(responseData.job).to.equal(randomJobTitle);\n\n   //! Step 5: Prepare data for writing to JSON file\n   const postResponseData = {\n     name: responseData.name,\n     job: responseData.job,\n     id: responseData.id,\n     createdAt: responseData.createdAt,\n   };\n\n   //! Step 6: Write response data to JSON file\n   const filePath = \"./response-data/post_response_data.json\"\n;\n   await fs.writeFile(filePath, JSON.stringify(postResponseData, null, 2), \"utf8\");\n\n\n   console.log(`Data successfully written to ${filePath}`);\n} catch (error) {\n  //! Handle errors gracefully\n  console.error(\"An error occurred:\", error.message);\n}",
              "err": {},
              "uuid": "09db7b2a-abf1-4fc9-aad1-f88d4b33cde6",
              "parentUUID": "f59d3bdf-f15a-416c-83aa-7757cae1cd72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09db7b2a-abf1-4fc9-aad1-f88d4b33cde6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 251,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}